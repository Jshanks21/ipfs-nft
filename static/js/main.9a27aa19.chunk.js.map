{"version":3,"sources":["components/Nav.js","components/App.js","components/ImageDisplay.js","components/Loading.js","components/MintTokenInput.js","serviceWorker.js","index.js"],"names":["Nav","account","this","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","height","width","src","concat","Identicon","toString","alt","Component","ipfs","require","ipfsClient","host","port","protocol","App","_this","Object","_mnt_c_Users_lfege_Code_ipfs_nft_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_mnt_c_Users_lfege_Code_ipfs_nft_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_mnt_c_Users_lfege_Code_ipfs_nft_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","call","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","mint","_ref","_mnt_c_Users_lfege_Code_ipfs_nft_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_mnt_c_Users_lfege_Code_ipfs_nft_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","mark","_callee","ipfsHash","_this$state","web3","wrap","_context","prev","next","state","contract","methods","send","from","gas","gasPrice","utils","toWei","once","receipt","location","reload","totalSupply","stop","_x","apply","arguments","onSubmit","_ref2","_callee2","imageHash","source","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","_context2","loading","add","progress","prog","console","log","_mnt_c_Users_lfege_Code_ipfs_nft_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncIterator__WEBPACK_IMPORTED_MODULE_9__","sent","done","value","_mnt_c_Users_lfege_Code_ipfs_nft_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","path","t0","return","finish","t1","error","_x2","bind","_mnt_c_Users_lfege_Code_ipfs_nft_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","tokenURI","tokenID","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","YoYoToken","networks","Contract","abi","address","i","uri","tokenByIndex","id","_this2","_this$state2","image","map","images","index","react__WEBPACK_IMPORTED_MODULE_10___default","key","_ImageDisplay__WEBPACK_IMPORTED_MODULE_14__","_Loading__WEBPACK_IMPORTED_MODULE_16__","_Nav__WEBPACK_IMPORTED_MODULE_15__","type","onChange","_MintTokenInput__WEBPACK_IMPORTED_MODULE_17__","href","rel","placeholder","ref","input","ImageDisplay","_this$props","Loading","_Nav__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap_Spinner__WEBPACK_IMPORTED_MODULE_6__","animation","variant","MintTokenInput","hashInput","pop","Boolean","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a27aa19.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Identicon from 'identicon.js';\r\n\r\nclass Nav extends Component {\r\n  render () {\r\n    const { account } = this.props\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <span\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          >\r\n            NFT Gallery\r\n          </span>\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              { this.props.account\r\n                ? <img\r\n                    className=\"ml-2\"\r\n                    height=\"30\"\r\n                    width=\"30\"\r\n                    src={`data:image/png;base64,${new Identicon(account, 30).toString()}`}\r\n                    alt=\"\"\r\n                  />\r\n                : <span></span>\r\n              }\r\n              <small className=\"text-white ml-2\">{account}</small>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Nav\r\n","import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport './App.css'\nimport YoYoToken from '../abis/YoYoToken'\nimport ImageDisplay from './ImageDisplay'\nimport Nav from './Nav'\nimport Loading from './Loading'\nimport MintTokenInput from './MintTokenInput'\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.captureFile = this.captureFile.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n\n    this.state = {\n      imageHash: [],\n      tokenURI: [],\n      tokenID: [],\n      contract: null,\n      web3: null,\n      buffer: null,\n      account: '',\n      totalSupply: 0,\n      loading: false\n    }\n  }\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    this.setState({ web3 })\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId()\n    const networkData = YoYoToken.networks[networkId]\n    if (networkData) {\n      const contract = new web3.eth.Contract(YoYoToken.abi, networkData.address)\n      this.setState({ contract })\n      const totalSupply = await contract.methods.totalSupply().call()\n      this.setState({ totalSupply })\n      for(let i = 1; i <= totalSupply; i++) {\n        const uri = await contract.methods.tokenURI(i - 1).call()\n        this.setState({\n          tokenURI: [...this.state.tokenURI, uri]\n        })\n        const id = await contract.methods.tokenByIndex(i - 1).call()\n        this.setState({ \n          tokenID: [...this.state.tokenID, id]\n        })\n      }\n    } else {\n      window.alert('Smart contract not deployed to detected network. Please switch to Ropsten testnet.')\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n    }\n  }\n\n  // getLastId = async () => {\n  //   const nfts = await this.state.contract.methods.totalSupply().call()\n  //   const lastNft = await this.state.contract.methods.tokenByIndex(nfts - 1).call()\n  //   return lastNft\n  // } \n\n  // setTokenID = async () => {\n  //   const { totalSupply, contract } = this.state\n  //   for(let i = 1; i <= totalSupply; i++) {\n  //     const id = await contract.methods.tokenByIndex(i - 1).call()\n  //     this.setState({ tokenID: [...tokenID, id]})\n  //   }\n  // }\n\n  mint = async (ipfsHash) => {\n    const { account, web3 } = this.state \n    await this.state.contract.methods.mint(ipfsHash).send({ from: account, gas: 5000000, gasPrice: web3.utils.toWei('30', 'gwei') })\n    .once('receipt', (receipt) => {\n      window.location.reload(true)\n    })\n    this.setState({\n      totalSupply: this.state.totalSupply++\n    })\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault()\n    const { imageHash } = this.state\n    this.setState({\n      loading: true\n    })\n    const source = ipfs.add(\n      this.state.buffer,\n      {\n        progress: (prog) => console.log(`received: ${prog}`)\n      }\n    )\n    try {\n      for await (const file of source) {\n        this.setState({\n          imageHash: [...imageHash, file.path],\n        })\n        this.setState({\n          loading: false\n        })\n      }\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  render() {\n    const { imageHash, account, loading, tokenURI } = this.state;\n    \n    const image = tokenURI.map((images, index) => {\n      return (\n        <div key={images}>\n          <ImageDisplay images={images} id={index} />\n        </div>\n      )        \n    })\n\n    if (loading) {\n      return <Loading account={account} />\n    }\n\n    if (!this.loadBlockchainData) {\n      return <div>Error connecting to blockchain...</div>      \n    }\n\n    return (\n      <div>\n        <Nav account={account} />\n\n\n        <div className=\"container-fluid text-center\">\n        <h2 className=\"float-left\">1</h2>\n          <h2 className=\"mt-5\">Upload Image to IPFS</h2>\n          <div className=\"text-center mb-5 alert alert-warning inline\">\n            <span>Live on Ropsten testnet.</span>\n          </div>\n          <form onSubmit={this.onSubmit} >\n            <input type=\"file\" onChange={this.captureFile} />\n            <input type='submit' className=\"btn btn-primary\" />\n            <MintTokenInput imageHash={imageHash}/>\n          </form>\n        </div>\n        <hr />\n\n        <div className=\"container-fluid text-center\">\n        <h2 className=\"float-left\">2</h2>\n          <h2 className=\"mt-5\">Mint Token</h2>\n          <span>\n            Get your test Ether\n            <a href=\"https://faucet.metamask.io/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              >\n              &nbsp;here.\n            </a>\n          </span>\n          <form className=\"mt-5\" onSubmit={(event) => {\n            event.preventDefault()\n            const ipfsHash = this.ipfsHash.value\n            this.mint(ipfsHash)\n            }}>\n            <input \n              type=\"text\" \n              className=\"mr-5\" \n              placeholder=\"e.g. QmSVPV4ccnNiz65PmPZt76pfpGZza6mK7Czh5sxyFzGxoV\" \n              ref={(input) => { this.ipfsHash = input }} \n            />\n            <input type='submit' className=\"ml-5 btn btn-primary\" />\n          </form>\n        </div>\n        <hr/>\n\n        <div className=\"container-fluid mt-5\">\n          <h2 className=\"float-left\">3</h2>\n          <h2 className=\"text-center\">Enjoy Your Collection</h2>\n          <div className=\"row text-center\">\n            {image}\n          </div>           \n        </div>\n        \n\n\n      </div>\n    );\n    \n\n  }\n}\n\nexport default App\n","import React, { Component } from 'react'\r\n\r\nclass ImageDisplay extends Component {\r\n\r\n  render () {\r\n    const { images, id } = this.props  \r\n\r\n    return (      \r\n      \r\n      <div className=\"gallery\"> \r\n        \r\n        <img            \r\n          src={images}\r\n          alt=\"\"\r\n        />\r\n        \r\n        <div className=\"desc\"><strong>ID:</strong> {id}</div>  \r\n          \r\n        \r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href={images}\r\n        >\r\n          <div className=\"desc mt-5\">Click to view on IPFS</div>\r\n        </a>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ImageDisplay\r\n","import React, { Component } from 'react'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Nav from './Nav'\r\n\r\nclass Loading extends Component {\r\n  render () {\r\n    const { account } = this.props\r\n    return (\r\n      <div>\r\n        <Nav account={account} />\r\n        <div className=\"text-center loader\">\r\n          {<Spinner animation=\"border\" variant=\"primary\" />}\r\n          <h2>Uploading to IPFS...</h2>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Loading\r\n","import React, { Component } from 'react'\r\n\r\nclass MintTokenInput extends Component {\r\n    render() {\r\n    const { imageHash } = this.props\r\n\r\n    const hashInput = imageHash.pop() \r\n\r\n        return (\r\n            <div className=\"desc\">\r\n              <strong>Paste this hash below.</strong>\r\n              <div>{hashInput}</div>\r\n              <small>(Hint: Upload something first.)</small>\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default MintTokenInput","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}